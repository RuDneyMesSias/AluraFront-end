/*No vídeo a seguir, vamos descobrir que existem três formas de configurarmos o CSS. A que fizemos até agora foi a primeira delas, a chamada CSS inline. Ou seja, na linha onde temos nossa tag, adicionamos a propriedade do CSS. A segunda é incluindo a estilização em cada tag na propriedade style, no mesmo arquivo html.

A terceira forma é através de um arquivo externo. Para que a estilização seja aplicada de forma correta, fique atento:

Se pensarmos em níveis hierárquicos, todas elas estão dentro da tag body. Ou seja, a tag body é pai de todas essas tags.

Como funciona o estilo em cascata do CSS?

    Como é uma folha de estilos em cascata, a cascata vai descendo, e o que eu faço no elemento pai reflete para o elemento filho.*/

/*Falando sobre dimensões no CSS, temos quatro parâmetros muito importantes. A largura de um elemento, a altura do elemento, e os espaçamentos. Espaçamento interno e espaçamento externo.

/* A dimensão de altura é muito fácil de identificar. Eu insiro com height e coloco em pixels, por exemplo, 100 pixels, ou 100px.

A largura de um elemento geralmente é adicionada em pixels, ou podemos também colocar a largura em percentual. Se eu quero que ocupe a página inteira, vou colocar 100%.*/

body { /*# 0- ausência de cores; f - Máximo de cores */
    
}

#banner { 
    width: 100%;/* O width é a propriedade que devemos manipular para alterar a largura do elemento.*/
}

.principal {
    background: #CCCCCC;
    padding: 30px;
}

.titulo-plincipal {
    padding-left: 20px;/*definição de uma classe que será utilizada para estilizar a tag <h1> no CSS*/
}

.titulo-centralizado {
    text-align: center;
}

p   {
    text-align: center;
}

#missão { /*marcador de identificação. É o id. Vamos colocar id = “”. Entre as aspas você coloca um nome qualquer, que é o mesmo que vai ser usado no nosso CSS.*/
    font-size: 20px;
}

em strong {  /* para definição do CSS. É definida em INLINE ou Estrutural. Para representar as cores existe 3 Formas: hexadecimal(#000000 a #FFFFFF), RGB o a 255 (255, 255, 255,) e cores básicas  */ 
    color: #FF0000;
}

.itens { /* O problema de usarmos as tags é que todas as listas do nosso site terão o mesmo estilo. E o problema de usar identificadores é que eles são únicos. Ou seja, temos uma lista com quatro itens e para marcar cada um deles, teríamos que criar quatro identificadores. Existe uma solução para isso. É o conceito das classes no CSS. As classes no CSS servem para marcarmos itens, para posteriormente colocarmos estilo em cada um deles, só que são repetíveis. Ou seja, podemos marcar todos os nossos itens com a mesma classe.*/
    font-style: italic;
}

.benefícios {
    background: #FFFFFF;
    padding: 20px;
}

ul {
    display: inline-block; /*existe uma terceira característica, quando o elemento possui as duas condições. Ele é inline e block ao mesmo tempo. Ou seja, ele bloqueia uma largura, mas essa largura é fixa. Sou eu que dou o tamanho. E ele me deixa também mexer na largura e nos espaçamentos interno e externo.*/

    vertical-align: top;
    width: 20%;
    margin-right: 15%;
}

.imagemBeneficios { /*A class serve para replicarmos a aplicação do nosso CSS, sem precisar copiar e colá-lo em vários elementos. Aplicamos a classe para isso.*/
    width: 50%;
}


/*developer tools temos uma divisão muito clara entre o que é o HTML, o que é o CSS e o que está sendo exibido no nosso elemento. Fundamental para entendermos e trabalharmos com desenvolvimento.*/